.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CONFIG-EDIT 1p"
.TH CONFIG-EDIT 1p "2010-10-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
config\-edit \- Edit data of configuration managed by Config::Model
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  config\-edit [options] \-model Fstab [ commands  ... ]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Config-model is a general purpose configuration framework.
.PP
The config-edit program will use Config::Model configuration
descriptions to provide a user interface so user can easily and
securely modify the configuration of their system.
.PP
You can specify commands as arguments that will be run on the
configuration root before launching the \s-1UI\s0. These command follow the
syntax defined in Config::Model::Loader.
.SH "Options"
.IX Header "Options"
.IP "\-model" 4
.IX Item "-model"
Mandatory option that specifies the configuration data to be
edited. The model must be available in \f(CW\*(C`/etc/config\-model.d/\*(C'\fR
directory in a \f(CW\*(C`.pl\*(C'\fR file. E.g. this command:
.Sp
.Vb 1
\&  config\-edit \-model Fstab
.Ve
.Sp
will look for \f(CW\*(C`/etc/config\-model.d/Fstab.pl\*(C'\fR model file. See
Config::Model for more details.
.IP "\-ui" 4
.IX Item "-ui"
Specify the user interface type.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`tk\*(C'\fR: provides a Tk graphical interface (If Config::Model::TkUI is
installed).
.IP "\(bu" 4
\&\f(CW\*(C`curses\*(C'\fR: provides a curses user interface (If
Config::Model::CursesUI is installed).
.IP "\(bu" 4
\&\f(CW\*(C`shell\*(C'\fR: provides a shell like interface.  See Config::Model::TermUI
for details.
.IP "\(bu" 4
\&\f(CW\*(C`none\*(C'\fR: No \s-1UI\s0 provided. Only command line arguments are handled.
.RE
.RS 4
.RE
.IP "\-dev" 4
.IX Item "-dev"
Use this option if you want to test a model under development. This
option will add \f(CW\*(C`lib\*(C'\fR in \f(CW@INC\fR and use \f(CW\*(C`lib/Config/Model/models\*(C'\fR
as model directory. This option is ignored when run as root.
.IP "\-model_dir" 4
.IX Item "-model_dir"
Specify an alternate directory to find model files. Mostly useful for
tests.
.IP "\-instance_name" 4
.IX Item "-instance_name"
Specify an instance_name. By default the instance name is copied from
model name.
.IP "\-root_dir" 4
.IX Item "-root_dir"
Specify a pseudo root directory to read and write the configuration
files. (Actual default directory and file names depends on the model
(See \f(CW\*(C`\-model\*(C'\fR option). For instance, if you specify \f(CW\*(C`~/mytest\*(C'\fR, the
\&\f(CW\*(C`/etc/ssh/sshd_config\*(C'\fR files will be written in \f(CW\*(C`~/mytest/etc/ssh/\*(C'\fR
directory.
.IP "\-verbose" 4
.IX Item "-verbose"
Be (very) verbose
.IP "\-debug" 4
.IX Item "-debug"
Provide debug infos.
.IP "\-trace" 4
.IX Item "-trace"
Provides a full stack trace when exiting on error.
.IP "\-force\-load" 4
.IX Item "-force-load"
Load file even if error are found in data. Bad data are discarded
.IP "\-backend" 4
.IX Item "-backend"
Specify a read/write backend. The actual backend name depends on the model
passed to \f(CW\*(C`\-model\*(C'\fR option. See Config::Model::AutoRead for details.
.IP "\-dump [ file ]" 4
.IX Item "-dump [ file ]"
Dump configuration content on \s-1STDOUT\s0 or in the specified with
Config::Model syntax.
.Sp
By default, dump only custom values, i.e. different from application
built-in values or model default values. See \-dumptype option for
other types of dump
.IP "\-dumptype [ full | preset | custom ]" 4
.IX Item "-dumptype [ full | preset | custom ]"
Choose to dump every values (full), only preset values or only
customized values (default)
.IP "\-load <cds_file_to_load>" 4
.IX Item "-load <cds_file_to_load>"
Load configuration data in model from cds file (using Config::Model
serialisation format, typically done with \-dump option). When this
option is used, the usual configuration files will not be read.
.Sp
If used with \f(CW\*(C`\-ui none\*(C'\fR, this option will load configuration data, 
validate it and save it in configuration file (if no error was found).
.IP "\-save" 4
.IX Item "-save"
Force re-writing the configuration. (useful for configuration upgrade)
.SH "Embedding config-edit"
.IX Header "Embedding config-edit"
You can use config-edit from another program by using \f(CW\*(C`\-ui simple\*(C'\fR
option. This way you will be able to send command on the standard input
of \f(CW\*(C`config\-edit\*(C'\fR and get the results from the standard output.
.SH "Saving configuration data"
.IX Header "Saving configuration data"
Configuration data are saved only when :
.IP "\(bu" 4
Requested through the user interface
.IP "\(bu" 4
When commands are specified with arguments
.IP "\(bu" 4
When \f(CW\*(C`\-load\*(C'\fR option is used
.IP "\(bu" 4
When \f(CW\*(C`\-save\*(C'\fR option is used
.PP
You can run safely \f(CW\*(C`config\-edit \-ui none\*(C'\fR to test a configuration,
configuration files will not be modified in this case.
.SH "LOGGING"
.IX Header "LOGGING"
All Config::Model logging is (slowly) moved from klunky debug and
verbose prints to Log::Log4perl. Logging can be configured in the
following files:
.IP "\(bu" 4

.Sp
.Vb 1
\& ~/.log4config\-model
.Ve
.IP "\(bu" 4

.Sp
.Vb 1
\& /etc/log4config\-model.conf
.Ve
.PP
Without these files, the following Log4perl config is used:
.PP
.Vb 5
\& log4perl.logger=WARN, Screen
\& log4perl.appender.Screen        = Log::Log4perl::Appender::Screen
\& log4perl.appender.Screen.stderr = 0
\& log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
\& log4perl.appender.Screen.layout.ConversionPattern = %d %m %n
.Ve
.PP
Log4perl uses the following categories:
.IP "Model" 4
.IX Item "Model"
.PD 0
.IP "Model::Load" 4
.IX Item "Model::Load"
.IP "Data" 4
.IX Item "Data"
.IP "Data::Read" 4
.IX Item "Data::Read"
.IP "Data::Write" 4
.IX Item "Data::Write"
.IP "Model::Searcher" 4
.IX Item "Model::Searcher"
.IP "Instance" 4
.IX Item "Instance"
.IP "Tree::Element::Value" 4
.IX Item "Tree::Element::Value"
.IP "Tree::Element::Id" 4
.IX Item "Tree::Element::Id"
.IP "Tree::Element::Id::Hash" 4
.IX Item "Tree::Element::Id::Hash"
.IP "Tree::Element::Id::List" 4
.IX Item "Tree::Element::Id::List"
.IP "Tree::Element::Warper" 4
.IX Item "Tree::Element::Warper"
.IP "Tree::Element::Warped" 4
.IX Item "Tree::Element::Warped"
.IP "Tree::Element::CheckList" 4
.IX Item "Tree::Element::CheckList"
.IP "Tree::Node" 4
.IX Item "Tree::Node"
.IP "Loader" 4
.IX Item "Loader"
.IP "Backend::Yaml" 4
.IX Item "Backend::Yaml"
.IP "Wizard::Helper" 4
.IX Item "Wizard::Helper"
.PD
.PP
More categories will come.
.SH "SUPPORT"
.IX Header "SUPPORT"
For support, please check the following ressources:
.IP "\(bu" 4
The config-model wiki: <http://config\-model.wiki.sourceforge.net/>
.IP "\(bu" 4
The config-model users mailing list:
<http://lists.sourceforge.net/mailman/listinfo/config\-model\-users>
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, ddumont at cpan dot org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config::Model::Model, 
Config::Model::Instance, 
Config::Model::Node, 
Config::Model::HashId,
Config::Model::ListId,
Config::Model::WarpedNode,
Config::Model::Value
