.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Model::CheckList 3pm"
.TH Config::Model::CheckList 3pm "2010-10-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Model::CheckList \- Handle check list element
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\& $model \->create_config_class 
\&  (
\&   ...
\&   element 
\&   => [ 
\&       check_list 
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            choice => [ \*(AqA\*(Aq, \*(AqB\*(Aq, \*(AqC\*(Aq, \*(AqD\*(Aq ],
\&            help   => { A => \*(AqA effect is this\*(Aq,
\&                        D => \*(AqD does that\*(Aq,
\&                      }
\&          },
\&       check_list_refering_to_another_hash 
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            refer_to => \*(Aq\- foobar\*(Aq
\&          },
\&
\&      ]
\&  ) ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a check list element for a Config::Model::Node.
In other words, this class provides a list of booleans items. Each item
can be set to 1 or 0.
.PP
The available items in the check list can be :
.IP "\(bu" 4
A fixed list (with the \f(CW\*(C`choice\*(C'\fR parameter)
.IP "\(bu" 4
A dynamic list where the available choise are the keys of another hash
of the configuration tree. See \*(L"Choice reference\*(R" for details.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
CheckList object should not be created directly.
.SH "CheckList model declaration"
.IX Header "CheckList model declaration"
A check list element must be declared with the following parameters:
.IP "type" 4
.IX Item "type"
Always \f(CW\*(C`checklist\*(C'\fR.
.IP "choice" 4
.IX Item "choice"
A list ref containing the check list items (optional)
.IP "refer_to" 4
.IX Item "refer_to"
This parameter is used when the keys of a hash are used to specify the
possible choices of the check list. \f(CW\*(C`refer_to\*(C'\fR point to a hash or list
element in the configuration tree. See \*(L"Choice reference\*(R" for
details. (optional)
.IP "computed_refer_to" 4
.IX Item "computed_refer_to"
Like \f(CW\*(C`refer_to\*(C'\fR, but use a computed value to find the hash or list
element in the configuration tree. See \*(L"Choice reference\*(R" for
details. (optional)
.IP "default_list" 4
.IX Item "default_list"
List ref to specify the check list items which are \*(L"on\*(R" by default.
(optional)
.IP "ordered" 4
.IX Item "ordered"
Specify whether the order of checked items must be preserved.
.IP "help" 4
.IX Item "help"
Hash ref to provide information on the check list items.
.IP "warp" 4
.IX Item "warp"
Used to provide dynamic modifications of the check list properties
See Config::Model::WarpedThing for details
.PP
For example:
.IP "\(bu" 4
A simple check list with help:
.Sp
.Vb 5
\&       choice_list
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            choice     => [\*(AqA\*(Aq .. \*(AqZ\*(Aq],
\&            help => { A => \*(AqA help\*(Aq, E => \*(AqE help\*(Aq } ,
\&          },
.Ve
.IP "\(bu" 4
A check list with default values:
.Sp
.Vb 5
\&       choice_list_with_default
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            choice     => [\*(AqA\*(Aq .. \*(AqZ\*(Aq],
\&            default_list   => [ \*(AqA\*(Aq, \*(AqD\*(Aq ],
\&          },
.Ve
.IP "\(bu" 4
A check list whose available choice and default change depending on
the value of the \f(CW\*(C`macro\*(C'\fR parameter:
.Sp
.Vb 9
\&       \*(Aqwarped_choice_list\*(Aq
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            warp => { follow => \*(Aq\- macro\*(Aq,
\&                      rules  => { AD => { choice => [ \*(AqA\*(Aq .. \*(AqD\*(Aq ], 
\&                                          default_list => [\*(AqA\*(Aq, \*(AqB\*(Aq ] },
\&                                  AH => { choice => [ \*(AqA\*(Aq .. \*(AqH\*(Aq ] },
\&                                }
\&                    }
\&          },
.Ve
.SH "Introspection methods"
.IX Header "Introspection methods"
The following methods returns the checklist parameter :
.IP "refer_to" 4
.IX Item "refer_to"
.PD 0
.IP "computed_refer_to" 4
.IX Item "computed_refer_to"
.PD
.SH "Choice reference"
.IX Header "Choice reference"
The choice items of a check_list can be given by another configuration
element. This other element can be:
.IP "\(bu" 4
The keys of a hash
.IP "\(bu" 4
Another checklist. In this case only the checked items of the other
checklist will be available.
.PP
This other hash or other checklist is indicated by the \f(CW\*(C`refer_to\*(C'\fR or
\&\f(CW\*(C`computed_refer_to\*(C'\fR parameter. \f(CW\*(C`refer_to\*(C'\fR uses the syntax of the
\&\f(CW\*(C`step\*(C'\fR parameter of grab(...)
.PP
See refer_to parameter.
.SS "Reference examples"
.IX Subsection "Reference examples"
.IP "\(bu" 4
A check list where the available choices are the keys of \f(CW\*(C`my_hash\*(C'\fR
configuration parameter:
.Sp
.Vb 4
\&       refer_to_list
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            refer_to => \*(Aq\- my_hash\*(Aq
\&          },
.Ve
.IP "\(bu" 4
A check list where the available choices are the checked items of
\&\f(CW\*(C`other_check_list\*(C'\fR configuration parameter:
.Sp
.Vb 7
\&       other_check_list => { type => \*(Aqcheck_list\*(Aq, 
\&                             choice => [qw/A B C/]
\&                           },
\&       refer_to_list
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            refer_to => \*(Aq\- other_check_list\*(Aq
\&          },
.Ve
.IP "\(bu" 4
A check list where the available choices are the keys of \f(CW\*(C`my_hash\*(C'\fR
and \f(CW\*(C`my_hash2\*(C'\fR and \f(CW\*(C`my_hash3\*(C'\fR configuration parameter:
.Sp
.Vb 4
\&       refer_to_3_lists
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            refer_to => \*(Aq\- my_hash + \- my_hash2   + \- my_hash3\*(Aq
\&          },
.Ve
.IP "\(bu" 4
A check list where the available choices are the specified choice and
the choice of \f(CW\*(C`refer_to_3_lists\*(C'\fR and a hash whose name is specified
by the value of the \f(CW\*(C`indirection\*(C'\fR configuration parameter (this
example is admitedly convoluted):
.Sp
.Vb 7
\&       refer_to_check_list_and_choice
\&       => { type => \*(Aqcheck_list\*(Aq,
\&            computed_refer_to => { formula => \*(Aq\- refer_to_2_list + \- $var\*(Aq,
\&                                   variables { \*(Aqvar\*(Aq => \*(Aq\- indirection \*(Aq }
\&                                 },
\&            choice  => [qw/A1 A2 A3/],
\&          },
.Ve
.SH "Methods"
.IX Header "Methods"
.SS "get_type"
.IX Subsection "get_type"
Returns \f(CW\*(C`check_list\*(C'\fR.
.SS "\fIcargo_type()\fP"
.IX Subsection "cargo_type()"
Returns 'leaf'.
.SS "check ( ... )"
.IX Subsection "check ( ... )"
Set choice. Parameter is either a list of choices to set or 
a list ref and some optional parmeter. I.e:
.PP
.Vb 1
\&  check (\e@list, check => \*(Aqskip\*(Aq) ;
.Ve
.PP
\&\f(CW\*(C`check\*(C'\fR parameter decide on behavior in case of unvalid
choice value: either die (if yes) or discard bad value (if skip)
.SS "uncheck (...)"
.IX Subsection "uncheck (...)"
Unset choice. Parameter is either a list of choices to unset or 
a list ref and some optional parmeter. I.e:
.PP
.Vb 1
\&  uncheck (\e@list, check => \*(Aqskip\*(Aq) ;
.Ve
.PP
\&\f(CW\*(C`check\*(C'\fR parameter decide on behavior in case of unvalid
choice value: either die (if yes) or discard bad value (if skip)
.SS "is_checked( choice, [ check => yes|skip ] , [ mode => ... ])"
.IX Subsection "is_checked( choice, [ check => yes|skip ] , [ mode => ... ])"
Return 1 if the given \f(CW\*(C`choice\*(C'\fR was set. Returns 0 otherwise.
.PP
\&\f(CW\*(C`check\*(C'\fR parameter decide on behavior in case of unvalid
choice value: either die (if yes) or discard bad value (if skip)
.PP
\&\f(CW\*(C`mode\*(C'\fR is either: custom standard preset default upstream_default
.SS "get_choice"
.IX Subsection "get_choice"
Returns an array of all items names that can be checked (i.e.
that can have value 0 or 1).
.SS "get_help (choice_value)"
.IX Subsection "get_help (choice_value)"
Return the help string on this choice value
.SS "clear"
.IX Subsection "clear"
Reset the check list (all items are set to 0) (can also be called as
\&\f(CW\*(C`clear_values\*(C'\fR)
.SS "get_checked_list_as_hash ( [ custom | preset | standard | default ] )"
.IX Subsection "get_checked_list_as_hash ( [ custom | preset | standard | default ] )"
Returns a hash (or a hash ref) of all items. The boolean value is the
value of the hash.
.PP
Example:
.PP
.Vb 1
\& { A => 0, B => 1, C => 0 , D => 1}
.Ve
.PP
By default, this method will return all items set by the user, or
items set in preset mode or checked by default.
.PP
With a parameter, this method will return either:
.IP "custom" 4
.IX Item "custom"
The list entered by the user
.IP "preset" 4
.IX Item "preset"
The list entered in preset mode
.IP "standard" 4
.IX Item "standard"
The list set in preset mode or checked by default.
.IP "default" 4
.IX Item "default"
The default list (defined by the configuration model)
.IP "upstream_default" 4
.IX Item "upstream_default"
The list implemented by upstream project (defined in the configuration
model)
.SS "get_checked_list ( [ custom | preset | standard | default ] )"
.IX Subsection "get_checked_list ( [ custom | preset | standard | default ] )"
Returns a list (or a list ref) of all checked items (i.e. all items
set to 1).
.SS "fetch ( [ custom | preset | standard | default ] )"
.IX Subsection "fetch ( [ custom | preset | standard | default ] )"
Returns a string listing the checked items (i.e. \*(L"A,B,C\*(R")
.SS "get( path  [, custom | preset | standard | default ])"
.IX Subsection "get( path  [, custom | preset | standard | default ])"
Get a value from a directory like path.
.SS "set( path , values )"
.IX Subsection "set( path , values )"
Set a checklist with a directory like path. Since a checklist is a leaf, the path
should be empty. The values are a comma separated list of checked items.
.PP
Example : \f(CW\*(C`$leaf\->set(\*(Aq\*(Aq,\*(AqA,C,Z\*(Aq) ;\*(C'\fR
.SS "set_checked_list ( item1, item2, ..)"
.IX Subsection "set_checked_list ( item1, item2, ..)"
Set all passed items to checked (1). All other available items
in the check list are set to 0.
.PP
Example:
.PP
.Vb 2
\&  # set cl to A=0 B=1 C=0 D=1
\&  $cl\->set_checked_list(\*(AqB\*(Aq,\*(AqD\*(Aq)
.Ve
.SS "set_checked_list_as_hash ( A => 1, B => 1 )"
.IX Subsection "set_checked_list_as_hash ( A => 1, B => 1 )"
Set check_list items. Missing items in the given list of parameters
are set to 0.
.PP
The example ( A => 1, B => 1 ) above will give :
.PP
.Vb 1
\& A = 1 , B = 1, C = 0 , D = 0
.Ve
.SS "load_data ( list_ref )"
.IX Subsection "load_data ( list_ref )"
Load check_list as an array ref. Data is simply forwarded to
set_checked_list.
.SH "Ordered checklist methods"
.IX Header "Ordered checklist methods"
All the methods below are valid only for ordered checklists.
.SH "swap ( choice_a, choice_b)"
.IX Header "swap ( choice_a, choice_b)"
Swap the 2 given choice in the list. Both choice must be already set.
.SH "move_up ( choice )"
.IX Header "move_up ( choice )"
Move the choice up in the checklist.
.SH "move_down ( choice )"
.IX Header "move_down ( choice )"
Move the choice down in the checklist.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, (ddumont at cpan dot org)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config::Model, 
Config::Model::Instance, 
Config::Model::Node, 
Config::Model::AnyId,
Config::Model::ListId,
Config::Model::HashId,
Config::Model::Value
