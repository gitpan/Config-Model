.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Model::Loader 3pm"
.TH Config::Model::Loader 3pm "2010-10-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Model::Loader \- Load serialized data into config tree
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Config::Model ;
\&
\& # create your config model
\& my $model = Config::Model \-> new ;
\& $model\->create_config_class( ... ) ;
\&
\& # create instance
\& my $inst = $model\->instance (root_class_name => \*(AqFooBar\*(Aq,
\&                              instance_name => \*(Aqtest1\*(Aq);
\&
\& # create root of config
\& my $root = $inst \-> config_root ;
\&
\& # put some data in config tree
\& my $step = \*(Aqstd_id:ab X=Bv \- std_id:bc X=Av \- a_string="toto tata"\*(Aq;
\& $root\->load( step => $step ) ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used directly by Config::Model::Node to load
serialized configuration data into the configuration tree.
.PP
Serialized data can be written by the user or produced by
Config::Model::Dumper while dumping data from a configuration tree.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "new ( )"
.IX Subsection "new ( )"
No parameter. The constructor should be used only by
Config::Model::Node.
.SH "load string syntax"
.IX Header "load string syntax"
The string is made of the following items (also called \f(CW\*(C`actions\*(C'\fR)
separated by spaces:
.IP "\-" 8
Go up one node
.IP "!" 8
Go to the root node of the configuration tree.
.IP "xxx" 8
.IX Item "xxx"
Go down using \f(CW\*(C`xxx\*(C'\fR element. (For \f(CW\*(C`node\*(C'\fR type element)
.IP "xxx:yy" 8
.IX Item "xxx:yy"
Go down using \f(CW\*(C`xxx\*(C'\fR element and id \f(CW\*(C`yy\*(C'\fR (For \f(CW\*(C`hash\*(C'\fR or \f(CW\*(C`list\*(C'\fR
element with \f(CW\*(C`node\*(C'\fR cargo_type)
.IP "xxx=~/yy/" 8
.IX Item "xxx=~/yy/"
Go down using \f(CW\*(C`xxx\*(C'\fR element and loop over the ids that match the regex.
(For \f(CW\*(C`hash\*(C'\fR)
.Sp
For instance, with OpenSsh model, you could do
.Sp
.Vb 1
\& Host=~/.*.debian.org/ user=\*(Aqfoo\-guest\*(Aq
.Ve
.Sp
to set \*(L"foo-user\*(R" users for all your debian accounts.
.IP "xxx~yy" 8
.IX Item "xxx~yy"
Delete item referenced by \f(CW\*(C`xxx\*(C'\fR element and id \f(CW\*(C`yy\*(C'\fR. For a list,
this is equivalent to \f(CW\*(C`splice xxx,yy,1\*(C'\fR. This command does not go
down in the tree (since it has just deleted the element). I.e. a
\&'\f(CW\*(C`\-\*(C'\fR' is generally not needed afterwards.
.IP "xxx=zz" 8
.IX Item "xxx=zz"
Set element \f(CW\*(C`xxx\*(C'\fR to value \f(CW\*(C`yy\*(C'\fR. load also accepts to set elements
with a quoted string. (For \f(CW\*(C`leaf\*(C'\fR element)
.Sp
For instance \f(CW\*(C`foo="a quoted string"\*(C'\fR. Note that you cannot embed
double quote in this string. I.e \f(CW\*(C`foo="a \e"quoted\e" string"\*(C'\fR will
fail.
.IP "xxx~" 8
.IX Item "xxx~"
Undef element \f(CW\*(C`xxx\*(C'\fR
.IP "xxx=z1,z2,z3" 8
.IX Item "xxx=z1,z2,z3"
Set list element \f(CW\*(C`xxx\*(C'\fR to list \f(CW\*(C`z1,z2,z3\*(C'\fR. Use \f(CW\*(C`,,\*(C'\fR for undef
values, and \f(CW""\fR for empty values.
.Sp
I.e, for a list \f(CW\*(C`(\*(Aqa\*(Aq,undef,\*(Aq\*(Aq,\*(Aqc\*(Aq)\*(C'\fR, use \f(CW\*(C`a,,"",c\*(C'\fR.
.IP "xxx:yy=zz" 8
.IX Item "xxx:yy=zz"
For \f(CW\*(C`hash\*(C'\fR element containing \f(CW\*(C`leaf\*(C'\fR cargo_type. Set the leaf
identified by key \f(CW\*(C`yy\*(C'\fR to value \f(CW\*(C`zz\*(C'\fR.
.Sp
Using \f(CW\*(C`xxx=~/yy/=zz\*(C'\fR is also possible.
.IP "xxx.=zzz" 8
.IX Item "xxx.=zzz"
Will append \f(CW\*(C`zzz\*(C'\fR value to current values (valid for \f(CW\*(C`leaf\*(C'\fR elements).
.IP "xxx#zzz or xxx:yyy#zzz" 8
.IX Item "xxx#zzz or xxx:yyy#zzz"
Element annotation. Can be quoted or not quoted. Note that annotations are
always placed at the end of an action item.
.Sp
I.e. \f(CW\*(C`foo#comment\*(C'\fR, \f(CW\*(C`foo:bar#comment\*(C'\fR or \f(CW\*(C`foo:bar=baz#comment\*(C'\fR are valid.
\&\f(CW\*(C`foo#comment:bar\*(C'\fR is \fBnot\fR valid.
.SH "Methods"
.IX Header "Methods"
.SS "load ( ... )"
.IX Subsection "load ( ... )"
Load data into the node tree (from the node passed with \f(CW\*(C`node\*(C'\fR)
and fill values as we go following the instructions passed with
\&\f(CW\*(C`step\*(C'\fR.  (\f(CW\*(C`step\*(C'\fR can also be an array ref).
.PP
Parameters are:
.IP "node" 4
.IX Item "node"
node ref of the root of the tree (of sub-root) to start the load from.
.IP "step" 4
.IX Item "step"
A string or an array ref containing the steps to load. See above for a
description of the string.
.IP "experience" 4
.IX Item "experience"
Specify the experience level used during the load (default:
\&\f(CW\*(C`master\*(C'\fR). The experience can be \f(CW\*(C`intermediate advanced master\*(C'\fR.
The load will raise an exception if the step of the load string tries
to access an element with experience higher than user's experience.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, (ddumont at cpan dot org)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config::Model,Config::Model::Node,Config::Model::Dumper
