.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Model::Instance 3pm"
.TH Config::Model::Instance 3pm "2010-10-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Model::Instance \- Instance of configuration tree
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $model = Config::Model\->new() ;
\& $model \->create_config_class ( ... ) ;
\&
\& my $inst = $model\->instance (root_class_name => \*(AqSomeRootClass\*(Aq, 
\&                              instance_name    => \*(Aqsome_name\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an object that holds a configuration tree.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
An instance object is created by calling 
instance method on 
an existing model:
.PP
.Vb 2
\& my $inst = $model\->instance (root_class_name => \*(AqSomeRootClass\*(Aq, 
\&                              instance_name => \*(Aqtest1\*(Aq);
.Ve
.PP
The directory (or directories) holding configuration files is
specified within the configuration model. For test purpose you can
change the \*(L"root\*(R" directory with \f(CW\*(C`root_dir\*(C'\fR parameter:
.IP "root_dir" 4
.IX Item "root_dir"
Pseudo root directory where to read \fIand\fR write configuration files
.IP "backend" 4
.IX Item "backend"
Specify which backend to use. See \*(L"write_back ( ... )\*(R" for details
.IP "skip_read" 4
.IX Item "skip_read"
When set, configuration files will not be read when creating
configuration tree.
.PP
Note that the root directory specified within the configuration model
will be overridden by \f(CW\*(C`root_dir\*(C'\fR parameter.
.PP
If you need to load configuration data that are not correct, you can
use \f(CW\*(C`force_load => 1\*(C'\fR. Then, wrong data will be discarded.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fIname()\fP"
.IX Subsection "name()"
Returns the instance name.
.SS "\fIconfig_root()\fP"
.IX Subsection "config_root()"
Returns the root object of the configuration tree.
.SS "reset_config"
.IX Subsection "reset_config"
Destroy current configuration tree (with data) and returns a new tree with
data (and annotations) loaded from disk.
.SS "\fIconfig_model()\fP"
.IX Subsection "config_model()"
Returns the model (Config::Model object) of the configuration tree.
.SS "\fIannotation_saver()\fP"
.IX Subsection "annotation_saver()"
Returns the object loading and saving annotations. See
Config::Model::Annotation for details.
.SS "preset_start ()"
.IX Subsection "preset_start ()"
All values stored in preset mode are shown to the user as default
values. This feature is useful to enter configuration data entered by
an automatic process (like hardware scan)
.SS "preset_stop ()"
.IX Subsection "preset_stop ()"
Stop preset mode
.SS "preset ()"
.IX Subsection "preset ()"
Get preset mode
.SS "data( kind, [data] )"
.IX Subsection "data( kind, [data] )"
The data method provide a way to store some arbitrary data in the
instance object.
.ie n .SS "load( ""..."" )"
.el .SS "load( ``...'' )"
.IX Subsection "load( ... )"
Load configuration tree with configuration data. See
Config::Model::Loader for more details
.SS "searcher ( )"
.IX Subsection "searcher ( )"
Returns an object dedicated to search an element in the configuration
model (respecting privilege level).
.PP
This method returns a Config::Model::Searcher object. See
Config::Model::Searcher for details on how to handle a search.
.SS "wizard_helper ( ... )"
.IX Subsection "wizard_helper ( ... )"
This method returns a Config::Model::WizardHelper object. See
Config::Model::WizardHelper for details on how to create a wizard
widget with this object.
.PP
wizard_helper arguments are explained in  Config::Model::WizardHelper
constructor arguments.
.SH "Auto read and write feature"
.IX Header "Auto read and write feature"
Usually, a program based on config model must first create the
configuration model, then load all configuration data.
.PP
This feature enables you to declare with the model a way to load
configuration data (and to write it back). See
Config::Model::AutoRead for details.
.SS "\fIread_root_dir()\fP"
.IX Subsection "read_root_dir()"
Returns root directory where configuration data is read from.
.SS "\fIbackend()\fP"
.IX Subsection "backend()"
Get the preferred backend method for this instance (as passed to the
constructor).
.SS "\fIwrite_root_dir()\fP"
.IX Subsection "write_root_dir()"
Returns root directory where configuration data is written to.
.SS "register_write_back ( backend_name, sub_ref )"
.IX Subsection "register_write_back ( backend_name, sub_ref )"
Register a sub ref (with the backend name) that will be called with
\&\f(CW\*(C`write_back\*(C'\fR method.
.SS "write_back ( ... )"
.IX Subsection "write_back ( ... )"
Try to run all subroutines registered with \f(CW\*(C`register_write_back\*(C'\fR to
write the configuration information until one succeeds (returns
true). (See Config::Model::AutoRead for details).
.PP
You can specify here a pseudo root dir or another config dir to write
configuration data back with \f(CW\*(C`root\*(C'\fR and \f(CW\*(C`config_dir\*(C'\fR parameters. This
will override the model specifications.
.PP
You can force to use a backend by specifying \f(CW\*(C`backend => xxx\*(C'\fR. 
For instance, \f(CW\*(C`backend => \*(Aqaugeas\*(Aq\*(C'\fR or \f(CW\*(C`backend => \*(Aqcustom\*(Aq\*(C'\fR.
.PP
You can force to use all backend to write the files by specifying 
\&\f(CW\*(C`backend => \*(Aqall\*(Aq\*(C'\fR.
.PP
\&\f(CW\*(C`write_back\*(C'\fR will croak if no write call-back are known.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, (ddumont at cpan dot org)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config::Model, 
Config::Model::Node, 
Config::Model::Loader,
Config::Model::Searcher,
Config::Model::Value,
