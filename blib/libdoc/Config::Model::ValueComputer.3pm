.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Model::ValueComputer 3pm"
.TH Config::Model::ValueComputer 3pm "2010-10-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Model::ValueComputer \- Provides configuration value computation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& my $model = Config::Model\->new() ;
\&
\& $model \->create_config_class 
\&  (
\&   name => "Master",
\&   element 
\&   => [
\&       [qw/av bv/] => {type => \*(Aqleaf\*(Aq,
\&                       value_type => \*(Aqinteger\*(Aq,
\&                      },
\&       compute_int 
\&       => { type => \*(Aqleaf\*(Aq,
\&            value_type => \*(Aqinteger\*(Aq,
\&            compute    => { formula   => \*(Aq$a + $b\*(Aq, 
\&                            variables => { a => \*(Aq\- av\*(Aq, b => \*(Aq\- bv\*(Aq}
\&                          },
\&            min        => \-4,
\&            max        => 4,
\&          },
\&       [qw/sav sbv/] => {type => \*(Aqleaf\*(Aq,
\&                         value_type => \*(Aqstring\*(Aq,
\&                      },
\&       compute_string
\&       => { type => \*(Aqleaf\*(Aq,
\&            value_type => \*(Aqstring\*(Aq,
\&            compute => { formula => \*(Aqmeet $a and $b\*(Aq, 
\&                         variables => { \*(Aq\- sav\*(Aq, b => \*(Aq\- sbv\*(Aq }
\&                       },
\&          },
\&       compute_with_replace 
\&       => { type => \*(Aqleaf\*(Aq,
\&            value_type => \*(Aqstring\*(Aq,
\&            compute => {
\&               formula   => \*(Aq$replace{$who} is the $replace{$what} of $replace{$country}\*(Aq,
\&               variables => {
\&                              who   => \*(Aq! who\*(Aq ,
\&                              what  => \*(Aq! what\*(Aq ,
\&                              country => \*(Aq\- country\*(Aq,
\&                             },
\&               replace   => { chief => \*(Aqpresident\*(Aq, 
\&                              America => \*(AqUSA\*(Aq
\&                            },
\&            },
\&       },
\&
\&       url => { type => \*(Aqleaf\*(Aq, value_type => \*(Aquniline\*(Aq},
\&       extract_host_from_url
\&       => { type => \*(Aqleaf\*(Aq,
\&            value_type => \*(Aquniline\*(Aq,
\&            compute    => { formula => \*(Aq$old =~ m!http://([\ew\e.]+)!; $1 ;\*(Aq , 
\&                            variables => { old => \*(Aq\- url\*(Aq } ,
\&                            use_eval => 1 ,
\&                          },
\&          },
\&     ]
\& ) ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a way to compute a configuration value. This
computation uses a formula and some other configuration values from
the configuration tree.
.PP
The computed value can be overridden, in other words, the computed
value can be used as a defult value.
.SH "Computed value declaration"
.IX Header "Computed value declaration"
A computed value must be declared in a 'leaf' element. The leaf element
must have a \f(CW\*(C`compute\*(C'\fR argument pointing to a hash ref.
.PP
This array ref contains:
.IP "\(bu" 4
A string formula that use variables and replace function.
.IP "\(bu" 4
A set of variable and their relative location in the tree (using the
notation explained in 
\&\fIgrab()\fR method
.IP "\(bu" 4
An optional set of replace rules.
.IP "\(bu" 4
An optional parameter to force a Perl eval of a string.
.SS "Compute formula"
.IX Subsection "Compute formula"
The first element of the \f(CW\*(C`compute\*(C'\fR array ref must be a string that
contains the computation algorithm (i.e. a formula for arithmetic
computation for integer values or a string template for string
values).
.PP
This string or formula should contain variables (like \f(CW$foo\fR or
\&\f(CW$bar\fR). Note that these variables are not interpolated by perl.
.PP
For instance:
.PP
.Vb 2
\&  \*(AqMy cat has $nb legs\*(Aq
\&  \*(Aq$m * $c**2\*(Aq
.Ve
.PP
This string or formula may also contain:
.IP "\(bu" 4
The index value of the current object : \f(CW&index\fR or \f(CW\*(C`&index()\*(C'\fR.
.IP "\(bu" 4
The index value of another object: \f(CW\*(C`&index($other)\*(C'\fR
.IP "\(bu" 4
The element name of the current object: \f(CW&element\fR or \f(CW\*(C`&element()\*(C'\fR.
.IP "\(bu" 4
The element name of another object: \f(CW\*(C`&element($other)\*(C'\fR
.PP
For instance, you could have this template string:
.PP
.Vb 2
\&   \*(Aqmy element is &element, my index is &index\*(Aq .
\&    \*(Aqupper element is &element($up), upper index is &index($up)\*(Aq,
.Ve
.PP
If you need to perform more complex operations than substition, like
extraction with regular expressions, you can force an eval done by
Perl with \f(CW\*(C`use_eval => 1\*(C'\fR. In this case, the result of the eval
will be used as the computed value.
.PP
For instance:
.PP
.Vb 5
\&  # extract host from url
\&  compute => { formula => \*(Aq$old =~ m!http://[\ew\e.]+(?::\ed+)?(/.*)!; $1 ;\*(Aq, 
\&               variables => { old => \*(Aq\- url\*(Aq } ,
\&               use_eval => 1 ,
\&             },
\&
\&  # capitalize
\&  compute => { formula => \*(Aquc($old)\*(Aq,
\&               variables => { old => \*(Aq\- small_caps\*(Aq } ,
\&               use_eval => 1 
\&             }
.Ve
.SS "Compute variables"
.IX Subsection "Compute variables"
The following arguments will be a set of \f(CW\*(C`key => value\*(C'\fR to define
the variables used in the formula. The key is a variable name used in
the computation string. The value is a string that will be used to get
the correct Value object.
.PP
In this numeric example, \f(CW\*(C`result\*(C'\fR default value is \f(CW\*(C`av + bv\*(C'\fR:
.PP
.Vb 10
\& element => [
\&  av => { 
\&    type => \*(Aqleaf\*(Aq,
\&    value_type => \*(Aqinteger\*(Aq
\&  },
\&  bv => { 
\&    type => \*(Aqleaf\*(Aq,
\&    value_type => \*(Aqinteger\*(Aq
\&  },
\&  result => { 
\&    type => \*(Aqleaf\*(Aq,
\&    value_type => \*(Aqinteger\*(Aq, 
\&    compute => { formula => \*(Aq$a + $b\*(Aq , 
\&                 variables => { a => \*(Aq\- av\*(Aq, b => \*(Aq\- bv\*(Aq },
\&               }
\&  }
.Ve
.PP
In this string example, the default value of the \f(CW\*(C`Comp\*(C'\fR element is
actually a string made of "\f(CW\*(C`macro is \*(C'\fR\*(L" and the value of the
\&\*(R"\f(CW\*(C`macro\*(C'\fR" element of the object located 2 nodes above:
.PP
.Vb 7
\&   comp => { 
\&    type => \*(Aqleaf\*(Aq,
\&    value_type => \*(Aqstring\*(Aq, 
\&    compute => { formula => \*(Aq"macro is $m"\*(Aq ,
\&                 variables => { m => \*(Aq\- \- macro\*(Aq }
\&               }
\&   }
.Ve
.SS "Compute replace"
.IX Subsection "Compute replace"
Sometime, using the value of a tree leaf is not enough and you need to
substitute a replacement for any value you can get. This replacement
can be done using a hash like notation within the formula using the
\&\f(CW%replace\fR hash.
.PP
For instance, if you want to display a summary of a config, you can do :
.PP
.Vb 11
\&       compute_with_replace 
\&       => {
\&            formula => \*(Aq$replace{$who} is the $replace{$what} of $replace{$country}\*(Aq,
\&            variables => {
\&                           who   => \*(Aq! who\*(Aq ,
\&                           what  => \*(Aq! what\*(Aq ,
\&                           country => \*(Aq\- country\*(Aq,
\&                         },
\&            replace => {  chief => \*(Aqpresident\*(Aq, 
\&                          America => \*(AqUSA\*(Aq
\&                       },
.Ve
.SS "Complex formula"
.IX Subsection "Complex formula"
\&\f(CW&index\fR, \f(CW&element\fR, and replace can be combined. But the
argument of \f(CW&element\fR or \f(CW&index\fR can only be a value object
specification (I.e. something like '\f(CW\*(C`\- \- foo\*(C'\fR'), it cannot be a value
replacement of another \f(CW&element\fR or \f(CW&index\fR.
.PP
I.e. \f(CW\*(C`&element($foo)\*(C'\fR is ok, but \f(CW\*(C`&element(&index($foo))\*(C'\fR is not allowed.
.SS "computed variable"
.IX Subsection "computed variable"
Compute variables can themselves be computed :
.PP
.Vb 10
\&   compute => {
\&     formula => \*(Aqget_element is $replace{$s}, indirect value is \e\*(Aq$v\e\*(Aq\*(Aq,
\&     variables => { \*(Aqs\*(Aq => \*(Aq! $where\*(Aq,
\&                     where => \*(Aq! where_is_element\*(Aq,
\&                     v => \*(Aq! $replace{$s}\*(Aq,
\&                  }
\&     replace   => { m_value_element => \*(Aqm_value\*(Aq,
\&                    compute_element => \*(Aqcompute\*(Aq 
\&                  }
\&    }
.Ve
.PP
Be sure not to specify a loop when doing recursive computation.
.SS "compute override"
.IX Subsection "compute override"
In some case, a computed value must be interpreted as a default value
and the user must be able to override this computed default value.  In
this case, you must use \f(CW\*(C`allow_override => 1\*(C'\fR with the
compute parameter:
.PP
.Vb 8
\&   computed_value_with_override => { 
\&    type => \*(Aqleaf\*(Aq,
\&    value_type => \*(Aqstring\*(Aq, 
\&    compute => { formula => \*(Aq"macro is $m"\*(Aq , 
\&                 variables => { m => \*(Aq\- \- macro\*(Aq } ,
\&                 allow_override => 1,
\&               }
\&   }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, (ddumont at cpan dot org)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config::Model, 
Config::Model::Instance, 
Config::Model::Value
