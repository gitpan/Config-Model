.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Model::WizardHelper 3pm"
.TH Config::Model::WizardHelper 3pm "2010-10-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Model::WizardHelper \- Helps to create wizard widget for config models
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Config::Model ;
\&
\& my $inst   = $model \-> instance ( root_class_name => \*(AqMaster\*(Aq, 
\&                                   instance_name => \*(Aqtest1\*(Aq);
\&
\& my $root   = $inst \-> config_root ;
\&
\& my $wizard = $inst \-> wizard_helper ( leaf_cb => sub { ... },
\&                                       hash_element_cb => sub { ... } );
\& $wizard\->start ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a class that is able to scan a configuration tree and
will call back user defined subroutines on one of the following condition:
.IP "\(bu" 4
A configuration item contains an error (mostly undefined mandatory
values)
.IP "\(bu" 4
A configuration item has a \f(CW\*(C`important\*(C'\fR level. See 
level parameter 
for details.
.PP
By default, the wizard will only scan element with an \f(CW\*(C`intermediate\*(C'\fR
experience.
.PP
The wizard helper supports going forward and backward during the scan
(to support \f(CW\*(C`back\*(C'\fR and \f(CW\*(C`next\*(C'\fR buttons on a wizard widget).
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
The constructor should be used only by Config::Model::Instance with
the wizard_helper
method.
.SH "Creating a wizard helper"
.IX Header "Creating a wizard helper"
A wizard helper will need at least two kind of call-back that must be
provided by the user: a call-back for leaf elements and a call-back
for hash elements (which will be also used for list elements).
.PP
These call-back must be passed when creating the wizard object (the
parameters are named \f(CW\*(C`leaf_cb\*(C'\fR and \f(CW\*(C`hash_element_cb\*(C'\fR)
.PP
Here are the the parameters accepted by \f(CW\*(C`wizard_helper\*(C'\fR:
.SS "call_back_on_important"
.IX Subsection "call_back_on_important"
Whether to call back when an important element is found (default 1).
.SS "experience"
.IX Subsection "experience"
Specifies the experience of the element scanned by the wizard (default
\&'intermediate').
.SS "leaf_cb"
.IX Subsection "leaf_cb"
Subroutine called backed for leaf elements. See
\&\*(L"Callback prototypes\*(R" in Config::Model::ObjTreeScanner for signature
and details. (mandatory)
.SS "hash_element_cb"
.IX Subsection "hash_element_cb"
Subroutine called backed for hash elements. See
\&\*(L"Callback prototypes\*(R" in Config::Model::ObjTreeScanner for signature
and details. (mandatory)
.SH "Custom callbacks"
.IX Header "Custom callbacks"
By default, \f(CW\*(C`leaf_cb\*(C'\fR will be called for all types of leaf elements
(i.e enum. integer, strings, ...). But you can provide dedicated
call-back for each type of leaf:
.PP
.Vb 2
\& enum_value_cb, integer_value_cb, number_value_cb, boolean_value_cb,
\& uniline_value_cb, string_value_cb
.Ve
.PP
Likewise, you can also provide a call-back dedicated to list elements with
\&\f(CW\*(C`list_element_cb\*(C'\fR
.SH "Methods"
.IX Header "Methods"
.SS "start"
.IX Subsection "start"
Start the scan and perform call-back when needed. This function will return
when the scan is completely done.
.SS "go_forward"
.IX Subsection "go_forward"
Set wizard in forward (default) mode.
.SS "go_backward"
.IX Subsection "go_backward"
Set wizard in backward mode.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, (ddumont at cpan dot org)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config::Model,
Config::Model::Instance,
Config::Model::Node,
Config::Model::HashId,
Config::Model::ListId,
Config::Model::Value,
Config::Model::CheckList,
Config::Model::ObjTreeScanner,
